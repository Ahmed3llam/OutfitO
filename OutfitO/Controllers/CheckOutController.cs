using Microsoft.AspNetCore.Mvc;
using OutfitO.Models;
using OutfitO.ViewModels;
using Stripe;
using System;

namespace OutfitO.Controllers
{
    public class CheckOutController : Controller
    {
        private readonly OutfitoContext _dbContext;

        public CheckOutController(OutfitoContext dbContext)
        {
            _dbContext = dbContext;
        }

        public IActionResult Index()
        {
            return View();
        }

        [HttpPost]
        public IActionResult ProcessPayment(PaymentViewModel model, string stripeToken)
        {
            try
            {
                // Configure Stripe with your secret key
                StripeConfiguration.ApiKey = "sk_test_51Oxs1dA5xWK61WYU1vOXqBpm4XmvZOmPAlHShIgyusJIej7fMytuXlWsfiApFV2AMwmTseQiyoPJ2mcAaWsSUEF9008TiLucZv";

                // Create a charge using the token generated by the Stripe.js
                var options = new ChargeCreateOptions
                {
                    Amount = (long)(model.Amount * 100), // Amount in cents
                    Currency = "usd",
                    Description = "Payment for " + model.Name,
                    Source = stripeToken,
                };
                var service = new ChargeService();
                var charge = service.Create(options);

                // If payment is successful, save payment information to the database
                if (charge.Status == "succeeded")
                {
                    var payment = new Payment
                    {
                        Name = model.Name,
                        Email = model.Email,
                        PaymentId = charge.Id,
                        Amount = (int)model.Amount,
                        // Add other properties as needed
                    };

                    _dbContext.Payment.Add(payment);
                    _dbContext.SaveChanges();

                    // Redirect to success view with payment information
                    return RedirectToAction("Success", new { paymentId = payment.PaymentId });
                }
                else
                {
                    // If payment fails, return to failure view
                    return RedirectToAction("Failed", new { errorMessage = "Payment failed." });
                }
            }
            catch (Exception ex)
            {
                // If an error occurs during payment processing, return to failure view
                return RedirectToAction("Failed", new { errorMessage = ex.Message });
            }
        }

        public IActionResult Success(string paymentId)
        {
            var payment = _dbContext.Payment.FirstOrDefault(p => p.PaymentId == paymentId);
            return View(payment);
        }

        public IActionResult Failed(string errorMessage)
        {
            try
            {
                ViewBag.ErrorMessage = errorMessage;
                return View();
            }
            catch (Exception ex)
            {
                // Log the exception
                Console.WriteLine("Error occurred while rendering Failed view: " + ex.Message);
                throw; // Rethrow the exception
            }
        }

    }
}
